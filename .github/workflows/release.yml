name: Release

on:
  push:
    tags:
      - "*.*.*"

jobs:
  build:
    strategy:
      matrix:
        toolchain:
          [
            { arch: aarch64-apple-darwin, name: silicon },
            { arch: x86_64-apple-darwin, name: intel },
          ]
    name: Build ${{ matrix.toolchain.name }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.toolchain.arch }}
          override: true
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.toolchain.arch }}
      - name: Test
        run: cargo test --release

      - name: "Configure certificates"
        run: >
          echo $DISTRIBUTION_CERT_BASE_64 | base64 --decode > cert.p12 &&
          security create-keychain -p $KEYCHAIN_PASS $KEYCHAIN &&
          security default-keychain -s ~/Library/Keychains/$KEYCHAIN-db &&
          security set-keychain-settings $KEYCHAIN &&
          security list-keychains -s $KEYCHAIN &&
          security list-keychains &&
          security unlock-keychain -p $KEYCHAIN_PASS $KEYCHAIN &&
          security import ./cert.p12 -k $KEYCHAIN -P $DISTRIBUTION_CERT_PASS -A -T /usr/bin/codesign -T /usr/bin/security &&
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASS $KEYCHAIN &&
          security find-identity -p codesigning -v
        env:
          KEYCHAIN: "def.keychain"
          KEYCHAIN_PASS: "hmmmm"
          DISTRIBUTION_CERT_BASE_64: ${{ secrets.DISTRIBUTION_CERT_BASE_64 }}
          DISTRIBUTION_CERT_PASS: ${{ secrets.DISTRIBUTION_CERT_PASS }}

      - name: "Configure notarytool"
        run: >
          xcrun notarytool store-credentials notarytool --apple-id $APPLE_ID --team-id $TEAM_ID --password $NOTARY_TOOL_PASS
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          NOTARY_TOOL_PASS: ${{ secrets.NOTARY_TOOL_PASS }}
          TEAM_ID: ${{ secrets.TEAM_ID }}

      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features --target ${{ matrix.toolchain.arch }}

      - name: create signed binary
        run: |
          mv target/${{ matrix.toolchain.arch }}/release/tmbliss ./tmbliss
          codesign -s "$SIGNING_IDENTITY" --deep -v -f -o runtime ./tmbliss
        env:
          SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}

      - name: Create archive for notarization
        run: zip -r notary.zip tmbliss

      - name: Notarize app
        run: xcrun notarytool submit notary.zip --keychain-profile notarytool --wait

      - name: Create release folder
        run: |
          mkdir output && mv ./tmbliss output/ && \
          chmod +x output/tmbliss && mv LICENCE.txt output/ && mv output ${{ matrix.toolchain.name }}

      - name: Create zip
        run: zip -qq -r ${{ matrix.toolchain.name }}.zip ${{ matrix.toolchain.name }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.toolchain.name }}
          path: ${{ matrix.toolchain.name }}.zip

  release:
    name: Make release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v3
        with:
          path: ~/artifacts
      - name: Move artifacts
        run: mv ~/artifacts/**/* ./
      - name: Create homebrew package
        run: |
          unzip silicon.zip && \
          unzip intel.zip && \
          mkdir homebrew && \
          mv silicon homebrew/ && \
          mv intel homebrew/ && \
          mv homebrew.tmbliss.plist homebrew/ && \
          zip -qq -r homebrew.zip homebrew
      - name: "Create Release"
        uses: softprops/action-gh-release@78c309ef59fdb9557cd6574f2e0be552936ed728
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            silicon.zip
            intel.zip
            homebrew.zip
